
# ЗАДАЧА №1 

# На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. 
# Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, 
# чтобы все монетки лежали одной и той же стороной вверх.
# Входные данные:
# На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, и равно 1, 
# если i-я монетка лежит решкой вверх. Размер списка не превышает 1000 элементов.
# Выходные данные:
# Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.

# n = 10                                   # Количество монеток
# coins = [int(input()) for i in range(n)]
# count0 = 0
# count1 = 0

# for i in range(n):
#     if coins[i] == 0:
#         count0 += 1
#     else:
#         count1 += 1

# if count1 > count0:
#     print("минимальное количество монеток, которые нужно перевернуть - ", count0)
# else:
#     print("минимальное количество монеток, которые нужно перевернуть - ", count1)



# ЗАДАЧА №2.

# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки. 
# Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
# Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. 
# В результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.

# x = None
# y = None
# s = 12
# p = 36

# # s = x + y
# # p = y * x
# # p = (s - x) * x    
# # x**2 - s * x + p = 0
# d = s**2 - 4 * 1 * p          # Считаем дискриминтанту квадратичного уравнения
# x = (s + d**0.5) / 2 * 1
# y = (s - d**0.5) / 2 * 1

# print(x, y)



# ЗАДАЧА №3 

# Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.

import time

n = int(input("Введите число N - "))
stepen = 0

while 2 ** stepen <= n:
    print(2 ** stepen)
    stepen += 1
print(time.time())