# lists = []                  # Пустой массив(список)
# lists = list()              # Пустой массив задаётся через метод list
# lists = [1, 2, 4, 5, 6, 7]
# #print(*lists)              # Вывод массива без скобок и запятых при помощи *
# print(lists.pop())          # Метод pop() вырезает последний элемент массива
# print(lists.pop(0))         # Также этот метод может вырезать элементы по индексу
# lists.append(25)            # Добавление элемента в конец массива
# print(lists)
# (lists.insert(2, 44))       # Добавление элемента массива 44 на место с индексом 2
# print(lists)


# КОРТЕЖИ - неизменяемые списки

# corteg = tuple()            # Создание пустого кортежа
# corteg = (1, 2,)            # При создании кортежа, в конце оставить запятую
# print(type(corteg))

# lists = [0, 5, 10]
# print(type(lists))

# lists = tuple(lists)        # Создание кортежа из массива
# print(type(lists))

# a, b = 1, 2                 # Множественное присваивание значений переменным
# c, d, e = lists
# print(c, d, e)


# СЛОВАРИ - массивы, к элементам которых можно обращаться по КЛЮЧУ, который ты задаешь самостоятельно

# person = dict{}                                        # Создание пустого словаря
# person = {"name": "Ivan", "age": 30, "city": "Saransk"}
# print(person["name"])                                  # Обращение к ключу для вывода имени Ivan
# person["height"] = 1.65                                # Добавление ещё одного элемента к словарю.
# print(person)
# for item in person:
#     print('{}: {}'.format(item, person[item]))         # Первый способ вывода словаря через метод format()
# for i in person.items():
#     print(i)                                           # Второй способ вывода словаря через items(), вывод словаря с круглыми скобками
# for c, f in person.items():                            # Без круглых скобок
#     print(c, f)

# del person['name']                                     # Удаление элемента словаря
# print(person)


# Множества. Содержат только УНИКАЛЬНЫЕ ЗНАЧЕНИЯ в списки

# colours = set()                                       # Создание пустого множества
# colours = {'red', 'blue', 'green'}
# colours.add('grey')                                   # Добавление элемента к множеству, на случайную позицию в списке
# print(colours)
# colours.remove('green')                               # Удаление элемента из множества
# print(colours)
# colours.clear()                                       # Удаление всех элементов множества
# print(colours)

# ОПЕРАЦИИ СО МНОЖЕСТВАМИ

# a = {1, 2, 5, 6, 7}
# b = {3, 2, 6, 8, 10}
# c = a.copy()                                    # Копирование множества в другое множество
# print(c)
# u = a.union(b)                                  # Объедирение
# print(u)
# i = a.intersection(b)                           # Пересечние множеств, то есть вывод в консоль совпадающих элементов
# dif1 = a.difference(b)                          # Вычитание a - b
# print(dif1)
# dif2 = b.difference(a)                          # Вычитание b - a
# print(dif2)
# q = a.union(b).difference(a.intersection(b))    # Сначала inter -> union -> differ
# print(q)

# freeze = frozenset(a)                           # Замороженное множество, данные которые точно не нужно изменять
# print(freeze)


# ТИПЫ ОШИБОК

# 1. SyntaxError - ошибка в букве или знаке
# 2. IndentationError - ошибка отступов
# 3. TypeError - оишбка использования типов
# 4. ZeroDivisionError - ошибка деления на 0
# 5. KeyError - ошибка ключа, обычно в словарях
# 6. NameError - ошибка имени переменной
# 7. ValueError - ошибка приведеиня типов из string в int, например

# Семинар 2. Задача №1

# Решение в группах
# По данному целому неотрицательному n вычислите
# значение n!. N! = 1 * 2 * 3 * … * N (произведение всех
# чисел от 1 до N) 0! = 1
# Решить задачу используя цикл while. Считаем факториалы

# n = int(input("Введите число "))
# amount = 1
# while n > 0:
#     amount = amount * n
#     n -=1
# print(amount)





# Задача №2. Решение в группах
# Дано натуральное число A > 1. Определите, каким по
# счету числом Фибоначчи оно является, то есть
# выведите такое число n, что φ(n)=A. Если А не
# является числом Фибоначчи, выведите число -1.
# Input: 5
# Output: 6
# 0, 1, 1, 2, 3, 5, 8, 13, 21 и т.д

# a = int(input("Введите число А "))
# lastnumber = 0
# curnumber = 1
# future_number = lastnumber + curnumber
# counts_future_number = 3

# while a >= future_number:
#     lastnumber = curnumber 
#     curnumber = future_number  
#     future_number = lastnumber + curnumber 
#     counts_future_number += 1   
#     if a == future_number:
#         print("Элемент Фибо под номером - ", counts_future_number)
#         break
#     elif a < future_number:
#         counts_future_number = -1
#         print("Элемент не находится в ряду Фибо", counts_future_number)




# # Задача №3.
# Уставшие от необычно теплой зимы, жители решили узнать, действительно ли это самая длинная оттепель за всю историю
# наблюдений за погодой. Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями статистики за
# прошлые годы. Их интересует, сколько дней длилась самая длинная оттепель. Оттепелью они называют период, в
# который среднесуточная температура ежедневно превышала 0 градусов Цельсия. Напишите программу, помогающую
# синоптикам в работе. Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках
# располагается N целых чисел. Каждое число – среднесуточная температура в соответствующий день. Температуры – целые числа и лежат в
# диапазоне от –50 до 50


# n_days = int(input("Введите количество рассматриваемых дней от 1 до 100: "))
# import random

# worm_days = 0

# for temp in range(n_days):
#     temp = random.randint(-50, 50)
#     print(temp)
#     if temp > 0:
#         worm_days += 1

# print("Количество дней оттепели = ", worm_days)



# # Задача №4. Орел и решка

# Дана строка текста, состоящая из букв русского алфавита "О" и "Р". Буква "О" – соответствует выпадению Орла, 
# а буква "Р" – соответствует выпадению Решки. Напишите программу, которая подсчитывает наибольшее количество подряд выпавших Решек.
# Формат входных данных
# На вход программе подается строка текста, состоящая из букв русского алфавита "О" и "Р".
# Формат выходных данных
# Программа должна вывести наибольшее количество подряд выпавших Решек.
# Примечание. Если выпавших Решек нет, то необходимо вывести число 0

# string = input("Введите рандомное количество букв Р и О: ")
# count_P = 0
# array_count = []

# for i in range(len(str(string))):
#     if string[i] == "P":
#         count_P += 1
#     elif string[i] == "O":
#         array_count.append(count_P)
#         count_P = 0
#     if string[len(str(string)) -1] == "P":   # Если последний элемент строки это Р, то добавь в массив количество Р, который шли подряд
#         array_count.append(count_P)
#     elif count_P == 0:
#         break 

# print(max(array_count))


# ВТОРОЙ СПОСОБ


# import random

# num_try = int(input("Введите количеств бросков монеток = "))

# string = ""
# for i in range(num_try):
# string += random.choice(["P","O"])

# print(string)

# max = 0
# count = 1
# i = 0

# while "P" * i in string:        # Определяет если в строке Р или РР или РРР или РРРР
#   i += 1
# print(i - 1)
# print("P" not in ["P","O"])