package Part2_Java.Seminar_6;

import java.util.Objects;

// 1. Продумайте структуру класса Кот. Какие поля и методы будут актуальны для приложения, которое является
// а) информационной системой ветеринарной клиники
// б) архивом выставки котов
// в) информационной системой Театра кошек Ю. Д. Куклачёва

// Для а - ID кота, кличка, Окраска, Порода, ФИО хозяина, Номер хоязина, Адрес проживания
// Для б - ID кота, кличка, Окраска, Порода, Наличие родословной, Индивидуальная особенность, ФИО хозяина, Номер хоязина
// Для в - ID кота, кличка, Окраска, Порода, Коронный номер, Возраст, Рейтинг популярности

// 1. Реализуйте 1 из вариантов класса Cat из предыдущего задания, можно использовать не все придуманные поля и методы. 
// Создайте несколько экземпляров этого класса, выведите их в консоль.
// 2. Добейтесь того, чтобы при выводе в консоль объекта типа Cat, выводилась
// его кличка, цвет и возраст (или другие параметры на ваше усмотрение).

// Задание:
// 1. Создайте множество, в котором будут храниться экземпляры класса Cat - HashSet<Cat>.
// Поместите в него некоторое количество объектов.
// 2. Создайте 2 или более котов с одинаковыми параметрами в полях. Поместите их во множество.
// Убедитесь, что все они сохранились во множество.
// 3. Создайте метод public boolean equals(Object o)
// Пропишите в нём логику сравнения котов по параметрам, хранимым в полях. То есть, метод
// должен возвращать true, только если значения во всех полях сравниваемых объектов равны.
// 4. Создайте метод public int hashCode()
// который будет возвращать hash, вычисленный на основе полей класса Cat. (Можно использовать
// Objects.hash(...))
// 5. Выведите снова содержимое множества из пункта 2, убедитесь, что дубликаты удалились

public class Cat {

    int id;
    String name;
    int age;
    String gender;
    String color;

    @Override
    public String toString() {
        return  " Cats { " +
                " id = " + id + "," +
                " name - " + name + "," +
                " age = " + age +
                " } ";
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Cat cat = (Cat) o;
        return id == cat.id && name == cat.name && age == cat.age && gender == cat.gender && color == cat.color;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, age, gender, color);
    }
} 


